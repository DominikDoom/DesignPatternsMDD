/**
 */
package designPatternsMDD.patterns.provider;

import designPatternsMDD.patterns.util.PatternsAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class PatternsItemProviderAdapterFactory extends PatternsAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public PatternsItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link designPatternsMDD.patterns.PatternRoot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PatternRootItemProvider patternRootItemProvider;

	/**
	 * This creates an adapter for a {@link designPatternsMDD.patterns.PatternRoot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPatternRootAdapter() {
		if (patternRootItemProvider == null) {
			patternRootItemProvider = new PatternRootItemProvider(this);
		}

		return patternRootItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link designPatternsMDD.patterns.ObserverPattern} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ObserverPatternItemProvider observerPatternItemProvider;

	/**
	 * This creates an adapter for a {@link designPatternsMDD.patterns.ObserverPattern}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createObserverPatternAdapter() {
		if (observerPatternItemProvider == null) {
			observerPatternItemProvider = new ObserverPatternItemProvider(this);
		}

		return observerPatternItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link designPatternsMDD.patterns.SingletonPattern} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SingletonPatternItemProvider singletonPatternItemProvider;

	/**
	 * This creates an adapter for a {@link designPatternsMDD.patterns.SingletonPattern}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSingletonPatternAdapter() {
		if (singletonPatternItemProvider == null) {
			singletonPatternItemProvider = new SingletonPatternItemProvider(this);
		}

		return singletonPatternItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link designPatternsMDD.patterns.BuilderPattern} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BuilderPatternItemProvider builderPatternItemProvider;

	/**
	 * This creates an adapter for a {@link designPatternsMDD.patterns.BuilderPattern}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBuilderPatternAdapter() {
		if (builderPatternItemProvider == null) {
			builderPatternItemProvider = new BuilderPatternItemProvider(this);
		}

		return builderPatternItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link designPatternsMDD.patterns.ObserverPair} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ObserverPairItemProvider observerPairItemProvider;

	/**
	 * This creates an adapter for a {@link designPatternsMDD.patterns.ObserverPair}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createObserverPairAdapter() {
		if (observerPairItemProvider == null) {
			observerPairItemProvider = new ObserverPairItemProvider(this);
		}

		return observerPairItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link designPatternsMDD.patterns.FactoryPattern} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FactoryPatternItemProvider factoryPatternItemProvider;

	/**
	 * This creates an adapter for a {@link designPatternsMDD.patterns.FactoryPattern}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFactoryPatternAdapter() {
		if (factoryPatternItemProvider == null) {
			factoryPatternItemProvider = new FactoryPatternItemProvider(this);
		}

		return factoryPatternItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link designPatternsMDD.patterns.StatePattern} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StatePatternItemProvider statePatternItemProvider;

	/**
	 * This creates an adapter for a {@link designPatternsMDD.patterns.StatePattern}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStatePatternAdapter() {
		if (statePatternItemProvider == null) {
			statePatternItemProvider = new StatePatternItemProvider(this);
		}

		return statePatternItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link designPatternsMDD.patterns.FactoryGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FactoryGroupItemProvider factoryGroupItemProvider;

	/**
	 * This creates an adapter for a {@link designPatternsMDD.patterns.FactoryGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFactoryGroupAdapter() {
		if (factoryGroupItemProvider == null) {
			factoryGroupItemProvider = new FactoryGroupItemProvider(this);
		}

		return factoryGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link designPatternsMDD.patterns.StateGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StateGroupItemProvider stateGroupItemProvider;

	/**
	 * This creates an adapter for a {@link designPatternsMDD.patterns.StateGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStateGroupAdapter() {
		if (stateGroupItemProvider == null) {
			stateGroupItemProvider = new StateGroupItemProvider(this);
		}

		return stateGroupItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (patternRootItemProvider != null)
			patternRootItemProvider.dispose();
		if (observerPatternItemProvider != null)
			observerPatternItemProvider.dispose();
		if (singletonPatternItemProvider != null)
			singletonPatternItemProvider.dispose();
		if (builderPatternItemProvider != null)
			builderPatternItemProvider.dispose();
		if (observerPairItemProvider != null)
			observerPairItemProvider.dispose();
		if (factoryPatternItemProvider != null)
			factoryPatternItemProvider.dispose();
		if (statePatternItemProvider != null)
			statePatternItemProvider.dispose();
		if (factoryGroupItemProvider != null)
			factoryGroupItemProvider.dispose();
		if (stateGroupItemProvider != null)
			stateGroupItemProvider.dispose();
	}

}
